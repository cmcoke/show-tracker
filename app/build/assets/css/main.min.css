/*
This file is used to contain all vendor imports.
*/
/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
   ========================================================================== */
/**
 * 1. Correct the line height in all browsers.
 * 2. Prevent adjustments of font size after orientation changes in
 *    IE on Windows Phone and in iOS.
 */
@import url("https://fonts.googleapis.com/css?family=Montserrat:400,500,700&display=swap");
html {
  line-height: 1.15;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/* Sections
   ========================================================================== */
/**
 * Remove the margin in all browsers (opinionated).
 */
body {
  margin: 0; }

/**
 * Add the correct display in IE 9-.
 */
article,
aside,
footer,
header,
nav,
section {
  display: block; }

/**
 * Correct the font size and margin on `h1` elements within `section` and
 * `article` contexts in Chrome, Firefox, and Safari.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/* Grouping content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
figcaption,
figure {
  display: block; }

/**
 * Add the correct margin in IE 8.
 */
figure {
  margin: 1em 40px; }

/**
 * 1. Add the correct box sizing in Firefox.
 * 2. Show the overflow in Edge and IE.
 */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */ }

/**
 * Add the correct display in IE.
 */
main {
  display: block; }

/**
 * 1. Correct the inheritance and scaling of font size in all browsers.
 * 2. Correct the odd `em` font sizing in all browsers.
 */
pre, code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */ }

/* Links
   ========================================================================== */
/**
 * 1. Remove the gray background on active links in IE 10.
 * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
 */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */ }

/* Text-level semantics
   ========================================================================== */
/**
 * 1. Remove the bottom border in Chrome 57- and Firefox 39-.
 * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
 */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
  /* 2 */ }

/**
 * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
 */
b,
strong {
  font-weight: inherit; }

/**
 * Add the correct font weight in Chrome, Edge, and Safari.
 */
b,
strong {
  font-weight: bolder; }

/**
 * Add the correct font style in Android 4.3-.
 */
dfn {
  font-style: italic; }

/**
 * Add the correct background and color in IE 9-.
 */
mark {
  background-color: #ff0;
  color: #000; }

/**
 * Add the correct font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` elements from affecting the line height in
 * all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sub {
  bottom: -0.25em; }

sup {
  top: -0.5em; }

/* Embedded content
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
audio,
video {
  display: inline-block; }

/**
 * Add the correct display in iOS 4-7.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Remove the border on images inside links in IE 10-.
 */
img {
  border-style: none; }

/**
 * Hide the overflow in IE.
 */
svg:not(:root) {
  overflow: hidden; }

/* Forms
   ========================================================================== */
/**
 * Known issues:
 * - `select`:
 *   By default, Chrome on OS X and Safari on OS X allow very limited styling of
 *   select, unless a border property is set. The default font weight on
 *   optgroup elements cannot safely be changed in Chrome on OSX and Safari on
 *   OS X.
 * - `[type="checkbox"]`:
 *   It is recommended that you do not style checkbox and radio inputs as
 *   Firefox's implementation does not respect box-sizing, padding, or width.
 * - `[type="number"]`:
 *   Certain font size values applied to number inputs cause the cursor style of
 *   the decrement button to change from `default` to `text`.
 * - `[type="search"]`:
 *   The search input is not fully stylable by default. In Chrome and Safari on
 *   OSX/iOS you can't control `font`, `padding`, `border`, or `background`. In
 *   Chrome and Safari on Windows you can't control `border` properly. It will
 *   apply `border-width` but will only show a border color (which cannot be
 *   controlled) for the outer 1px of that border. Applying
 *   `-webkit-appearance: textfield` addresses these issues without removing the
 *   benefits of search inputs (e.g. showing past searches). Safari (but not
 *   Chrome) will clip the cancel button on when it has padding (and `textfield`
 *   appearance).
 * - `::placeholder`:
 *   In Edge, placeholders will disappear on `relative` or `absolute` positioned
 *   `<input>` elements if you use `opacity` less than `1` due to a
 *   [bug](https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/3901363/).
 */
/**
 * 1. Change the font styles in all browsers (opinionated).
 * 2. Remove the margin in Firefox and Safari.
 */
button,
input,
optgroup,
select,
textarea {
  line-height: 1.15;
  /* 1 */
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  margin: 0;
  /* 2 */ }

/**
 * Show the overflow in IE.
 */
button {
  overflow: visible; }

/**
 * Remove the inheritance of text transform in Edge, Firefox, and IE.
 * 1. Remove the inheritance of text transform in Firefox.
 */
button,
select {
  /* 1 */
  text-transform: none; }

/**
 * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
 *    controls in Android 4.
 * 2. Correct the inability to style clickable types in iOS and Safari.
 */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */ }

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
   * Remove the inner border and padding in Firefox.
   */
  /**
   * Restore the focus styles unset by the previous rule.
   */ }
  button::-moz-focus-inner,
  [type="button"]::-moz-focus-inner,
  [type="reset"]::-moz-focus-inner,
  [type="submit"]::-moz-focus-inner {
    border-style: none;
    padding: 0; }
  button:-moz-focusring,
  [type="button"]:-moz-focusring,
  [type="reset"]:-moz-focusring,
  [type="submit"]:-moz-focusring {
    outline: 1px dotted ButtonText; }

/**
 * Show the overflow in Edge.
 */
input {
  overflow: visible; }

/**
 * 1. Add the correct box sizing in IE 10-.
 * 2. Remove the padding in IE 10-.
 */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Correct the cursor style of increment and decrement buttons in Chrome.
 */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Correct the odd appearance in Chrome and Safari.
 * 2. Correct the outline style in Safari.
 */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
   * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
   */ }
  [type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
    -webkit-appearance: none; }

/**
 * 1. Correct the inability to style clickable types in iOS and Safari.
 * 2. Change font properties to `inherit` in Safari.
 */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */ }

/**
 * Correct the padding in Firefox.
 */
fieldset {
  padding: 0.35em 0.75em 0.625em; }

/**
 * 1. Correct the text wrapping in Edge and IE.
 * 2. Correct the color inheritance from `fieldset` elements in IE.
 * 3. Remove the padding so developers are not caught out when they zero out
 *    `fieldset` elements in all browsers.
 */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */ }

/**
 * 1. Add the correct display in IE 9-.
 * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
 */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Remove the default vertical scrollbar in IE.
 */
textarea {
  overflow: auto; }

/* Interactive
   ========================================================================== */
/*
 * Add the correct display in Edge, IE, and Firefox.
 */
details {
  display: block; }

/*
 * Add the correct display in all browsers.
 */
summary {
  display: list-item; }

/*
 * Add the correct display in IE 9-.
 */
menu {
  display: block; }

/* Scripting
   ========================================================================== */
/**
 * Add the correct display in IE 9-.
 */
canvas {
  display: inline-block; }

/**
 * Add the correct display in IE.
 */
template {
  display: none; }

/* Hidden
   ========================================================================== */
/**
 * Add the correct display in IE 10-.
 */
[hidden] {
  display: none; }

/*8.0.0*/
/*! Flickity v2.2.0
https://flickity.metafizzy.co
---------------------------------------------- */
.flickity-enabled {
  position: relative; }

.flickity-enabled:focus {
  outline: none; }

.flickity-viewport {
  overflow: hidden;
  position: relative;
  height: 100%; }

.flickity-slider {
  position: absolute;
  width: 100%;
  height: 100%; }

/* draggable */
.flickity-enabled.is-draggable {
  -webkit-tap-highlight-color: transparent;
  tap-highlight-color: transparent;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none; }

.flickity-enabled.is-draggable .flickity-viewport {
  cursor: move;
  cursor: -webkit-grab;
  cursor: grab; }

.flickity-enabled.is-draggable .flickity-viewport.is-pointer-down {
  cursor: -webkit-grabbing;
  cursor: grabbing; }

/* ---- flickity-button ---- */
.flickity-button {
  position: absolute;
  background: rgba(255, 255, 255, 0.75);
  border: none;
  color: #333; }

.flickity-button:hover {
  background: white;
  cursor: pointer; }

.flickity-button:focus {
  outline: none;
  box-shadow: 0 0 0 5px #19F; }

.flickity-button:active {
  opacity: 0.6; }

.flickity-button:disabled {
  opacity: 0.3;
  cursor: auto;
  /* prevent disabled button from capturing pointer up event. #716 */
  pointer-events: none; }

.flickity-button-icon {
  fill: currentColor; }

/* ---- previous/next buttons ---- */
.flickity-prev-next-button {
  top: 50%;
  width: 44px;
  height: 44px;
  border-radius: 50%;
  /* vertically center */
  -webkit-transform: translateY(-50%);
          transform: translateY(-50%); }

.flickity-prev-next-button.previous {
  left: 10px; }

.flickity-prev-next-button.next {
  right: 10px; }

/* right to left */
.flickity-rtl .flickity-prev-next-button.previous {
  left: auto;
  right: 10px; }

.flickity-rtl .flickity-prev-next-button.next {
  right: auto;
  left: 10px; }

.flickity-prev-next-button .flickity-button-icon {
  position: absolute;
  left: 20%;
  top: 20%;
  width: 60%;
  height: 60%; }

/* ---- page dots ---- */
.flickity-page-dots {
  position: absolute;
  width: 100%;
  bottom: -25px;
  padding: 0;
  margin: 0;
  list-style: none;
  text-align: center;
  line-height: 1; }

.flickity-rtl .flickity-page-dots {
  direction: rtl; }

.flickity-page-dots .dot {
  display: inline-block;
  width: 10px;
  height: 10px;
  margin: 0 8px;
  background: #333;
  border-radius: 50%;
  opacity: 0.25;
  cursor: pointer; }

.flickity-page-dots .dot.is-selected {
  opacity: 1; }

/*
This file is used to contain all abstracts imports.
Files inside this folder can contain abstract settings, helpers or functions. They have no direct output.
*/
/*
This file is used to contain all base imports.
Files inside this folder can contain global styles used in the project.
*/
*, *::after, *::before {
  box-sizing: border-box; }

/* make sticky footer  -- start */
html, body {
  height: 100%; }

body {
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column; }

.content {
  -webkit-box-flex: 1;
          flex: 1 0 auto; }

.footer {
  flex-shrink: 0; }

/* make sticky footer  -- end */
img {
  max-width: 100%;
  height: auto; }

a {
  text-decoration: none; }

ul {
  list-style: none;
  margin: 0;
  padding: 0; }

li {
  list-style: none; }

body {
  font-family: "Montserrat", sans-serif; }

/*
This file is used to contain all component imports.
Files inside this folder should contain all styles relating to a reusable component.
*/
.btn {
  background-color: #540cfa;
  color: #fff;
  text-decoration: none;
  padding: 10px 22px;
  border-radius: 5px;
  display: inline-block; }
  .btn--header {
    padding-right: 14px;
    padding-left: 14px; }
  .btn--hero {
    border: none;
    padding-top: 15px;
    padding-bottom: 15px;
    font-family: "Montserrat", sans-serif;
    cursor: pointer;
    width: 101%; }
    @media (min-width: 768px) {
      .btn--hero {
        padding-top: 11px;
        padding-bottom: 11px;
        width: 80%;
        margin-top: 9px; } }
    @media (min-width: 1024px) {
      .btn--hero {
        padding-top: 11px;
        padding-bottom: 11px;
        width: 31%; } }
  .btn--started {
    border: none;
    padding-top: 15px;
    padding-bottom: 15px;
    font-family: "Montserrat", sans-serif;
    cursor: pointer;
    width: 101%; }
    @media (min-width: 768px) {
      .btn--started {
        width: 25%;
        padding-top: 11px;
        padding-bottom: 11px; } }
    @media (min-width: 1116px) {
      .btn--started {
        width: 20%;
        padding-top: 11px;
        padding-bottom: 11px; } }
    @media (min-width: 1366px) {
      .btn--started {
        width: 15%; } }
  .btn--community {
    padding-top: 14px;
    padding-bottom: 14px; }

.container {
  max-width: 315px;
  margin: 0 auto;
  padding: 0 11px; }
  @media screen and (min-width: 400px) {
    .container {
      max-width: 1300px;
      padding: 0 18px; } }

.heading {
  font-weight: 700; }
  .heading--hero {
    font-size: calc(1.875rem + 2.5 * ((100vw - 26.25rem) / 53.75));
    line-height: 35px;
    margin-bottom: 0px; }
  @media screen and (min-width: 1280px){
  .heading--hero{
    font-size: 4.375rem; } }
  @media screen and (max-width: 420px){
  .heading--hero{
    font-size: 1.875rem; } }
    @media (min-width: 768px) {
      .heading--hero {
        font-size: 44px;
        line-height: 48px; } }
    @media (min-width: 1024px) {
      .heading--hero {
        font-size: 52px;
        line-height: 55px; } }
  .heading--features {
    font-size: 30px;
    line-height: 34px;
    margin-top: 10px; }
    @media (min-width: 504px) {
      .heading--features {
        font-size: 35px;
        line-height: 37px; } }
    @media (min-width: 768px) {
      .heading--features {
        font-size: 47px;
        line-height: 49px;
        width: 700px;
        margin: 10px auto 10px auto; } }
    @media (min-width: 1024px) {
      .heading--features {
        font-size: 60px;
        line-height: 65px;
        width: 700px;
        margin: 10px auto 10px auto; } }
  .heading--platform {
    font-size: 25px;
    line-height: 30px; }
    @media (min-width: 768px) {
      .heading--platform {
        width: 450px;
        font-size: 36px;
        line-height: 42px; } }
    @media (min-width: 1024px) {
      .heading--platform {
        width: 600px;
        font-size: 50px; } }
    @media (min-width: 1030px) {
      .heading--platform {
        width: 499px;
        font-size: 40px; } }
    @media (min-width: 1034px) {
      .heading--platform {
        width: 499px;
        font-size: 45px;
        line-height: 50px; } }
  .heading--community {
    font-size: 32px;
    line-height: 38px;
    margin-top: 11px;
    margin-bottom: -1px; }
    @media (min-width: 768px) {
      .heading--community {
        font-size: 42px;
        line-height: 49px;
        margin-top: 11px;
        margin-bottom: -1px;
        width: 500px; } }
  .heading--started {
    font-size: 35px;
    line-height: 40px;
    margin: -10px auto 10px auto; }
    @media (min-width: 768px) {
      .heading--started {
        font-size: 60px;
        line-height: 63px;
        width: 606px;
        margin: 0px auto 10px auto; } }

.section {
  font-size: 12px;
  color: #BDBDBD;
  letter-spacing: 1px; }
  .section--hero {
    text-transform: uppercase;
    text-align: center; }
    @media (min-width: 768px) {
      .section--hero {
        text-align: left; } }
    @media (min-width: 1024px) {
      .section--hero {
        text-align: left; } }
  .section--features {
    text-align: center;
    font-size: 15px;
    margin-bottom: 0px; }
  .section--community {
    font-size: 15px;
    line-height: 28px;
    margin-bottom: 0px; }
    @media (min-width: 768px) {
      .section--community {
        font-size: 15px;
        line-height: 28px;
        margin-bottom: 0px;
        width: 520px; } }
  .section--started {
    font-size: 15px; }

.text-content {
  font-weight: 300; }
  .text-content--hero {
    font-size: calc(1.125rem + 0.125 * ((100vw - 26.25rem) / 53.75));
    line-height: 27px; }
  @media screen and (min-width: 1280px){
  .text-content--hero{
    font-size: 1.25rem; } }
  @media screen and (max-width: 420px){
  .text-content--hero{
    font-size: 1.125rem; } }
    @media (min-width: 768px) {
      .text-content--hero {
        line-height: 32px;
        width: 422px; } }
    @media (min-width: 1024px) {
      .text-content--hero {
        line-height: 32px;
        width: 570px; } }
  .text-content--features {
    font-size: 16px;
    line-height: 26px; }
    @media (min-width: 504px) {
      .text-content--features {
        font-size: 18px; } }
    @media (min-width: 768px) {
      .text-content--features {
        font-size: 18px;
        line-height: 28px;
        width: 610px;
        margin: 20px auto 60px auto; } }
  .text-content--platform {
    font-size: 16px;
    line-height: 32px;
    margin-top: -10px; }
    @media (min-width: 768px) {
      .text-content--platform {
        font-size: 18px;
        line-height: 32px;
        width: 520px;
        margin-top: -10px; } }
    @media (min-width: 944px) {
      .text-content--platform {
        font-size: 18px;
        line-height: 32px;
        width: 581px;
        margin-top: -10px; } }
    @media (min-width: 1024px) {
      .text-content--platform {
        font-size: 18px;
        line-height: 32px;
        width: 600px;
        margin-top: -10px; } }
    @media (min-width: 1034px) {
      .text-content--platform {
        font-size: 18px;
        line-height: 32px;
        width: 502px;
        margin-top: -10px; } }
  .text-content--community {
    color: #BDBDBD;
    font-size: 18px;
    line-height: 25px; }
    @media (min-width: 768px) {
      .text-content--community {
        line-height: 32px;
        margin-top: 25px;
        margin-bottom: 30px;
        width: 470px; } }
  .text-content--started {
    font-size: 16px;
    line-height: 30px; }
    @media (min-width: 768px) {
      .text-content--started {
        font-size: 18px;
        line-height: 32px;
        width: 600px;
        margin: 20px auto 30px auto; } }

.input {
  font-family: "Montserrat", sans-serif; }
  .input--hero {
    width: 100%;
    padding: 15px 20px;
    margin: 8px 4px 15px 4px;
    border-radius: 5px;
    border: 1px solid #C4C4C4;
    -webkit-transition: ease-in .2s;
    transition: ease-in .2s; }
    @media (min-width: 768px) {
      .input--hero {
        width: 80%;
        padding: 11px 20px;
        margin: 8px 0; } }
    @media (min-width: 1024px) {
      .input--hero {
        width: 40%;
        padding: 11px 20px;
        margin: 8px 0; } }
    .input--hero:focus {
      outline: none !important;
      border-color: #540cfa; }
  .input--started {
    width: 100%;
    padding: 15px 20px;
    margin: 8px 4px 15px 4px;
    border-radius: 5px;
    border: 1px solid #C4C4C4;
    -webkit-transition: ease-in .2s;
    transition: ease-in .2s; }
    @media (min-width: 768px) {
      .input--started {
        width: 40%;
        padding: 11px 20px;
        margin: 8px 0; } }
    @media (min-width: 1116px) {
      .input--started {
        width: 30%; } }
    @media (min-width: 1366px) {
      .input--started {
        width: 23%; } }
    .input--started:focus {
      outline: none !important;
      border-color: #540cfa; }

.carousel-cell {
  position: relative;
  height: auto;
  width: 100%;
  padding: 2rem; }
  @media (min-width: 576px) and (max-width: 767px) {
    .carousel-cell {
      width: 50%;
      padding: .3rem; } }
  @media (min-width: 768px) and (max-width: 991px) {
    .carousel-cell {
      width: 33%;
      padding: .3rem; } }
  @media (min-width: 992px) and (max-width: 1280px) {
    .carousel-cell {
      width: 25%;
      padding: .4rem; } }
  @media (min-width: 1281px) {
    .carousel-cell {
      width: 17%;
      padding: .2rem; } }

/*
This file is used to contain all component imports.
Files inside this folder can contain specific element styles and layout.
*/
.header {
  background: white;
  border-bottom: 1px solid #EBEBEB; }
  .header__shapes {
    width: 100%;
    margin: 0 auto;
    position: absolute;
    overflow: none;
    z-index: -1; }
    @media (min-width: 1628px) {
      .header__shapes {
        width: 100%;
        margin: 0 auto;
        position: absolute;
        overflow: hidden;
        z-index: -1; } }
  .header__shape--1 {
    display: none; }
    @media (min-width: 1628px) {
      .header__shape--1 {
        display: inline;
        position: relative;
        right: 300px;
        top: 100px; } }
  .header__shape--2 {
    display: none; }
    @media (min-width: 1628px) {
      .header__shape--2 {
        display: inline;
        position: relative;
        left: 750px;
        bottom: 250px; } }
  .header__wrapper {
    display: -webkit-box;
    display: flex;
    -webkit-box-align: center;
            align-items: center;
    -webkit-box-pack: justify;
            justify-content: space-between;
    padding-top: 20px;
    padding-bottom: 10px; }
  .header__nav {
    display: none; }
    @media (min-width: 768px) {
      .header__nav {
        display: -webkit-box;
        display: flex;
        -webkit-box-align: center;
                align-items: center; }
        .header__nav li {
          margin-left: 50px; }
        .header__nav a {
          color: black;
          font-weight: 500;
          font-size: 14px; } }
  .header__login {
    display: none; }
    @media (min-width: 768px) {
      .header__login {
        display: block; } }
  .header__login-started {
    display: -webkit-box;
    display: flex;
    -webkit-box-align: center;
            align-items: center; }
    .header__login-started li {
      margin-left: 30px;
      font-size: 14px; }
  .header__login {
    color: black;
    font-weight: 600; }

.hero {
  z-index: 2; }
  @media (min-width: 768px) {
    .hero__wrapper {
      display: -webkit-box;
      display: flex; } }
  .hero__text-content {
    margin-top: 50px; }
    @media (min-width: 768px) {
      .hero__text-content {
        width: 700px;
        margin-top: 43px; } }
    @media (min-width: 1024px) {
      .hero__text-content {
        width: 700px;
        margin-top: 46px; } }
  .hero__compatiable-content {
    margin-top: 50px;
    text-align: center; }
    @media (min-width: 768px) {
      .hero__compatiable-content {
        text-align: left;
        margin-top: 80px; } }
  .hero__compatiable-list img {
    width: 40px;
    margin-left: 11px; }
    @media (min-width: 768px) {
      .hero__compatiable-list img {
        margin-right: 20px;
        width: 50px; } }
    @media (min-width: 1024px) {
      .hero__compatiable-list img {
        margin-right: 14px;
        width: 50px; } }
  .hero__phone-img {
    display: block;
    margin-left: 11px;
    margin-right: auto;
    margin-left: auto;
    margin-top: 30px;
    width: 300px; }
    @media (min-width: 768px) {
      .hero__phone-img {
        display: inline;
        margin-top: 55px;
        margin-left: 10px;
        margin-right: 0px; } }
    @media (min-width: 1024px) {
      .hero__phone-img {
        display: inline;
        margin-top: 55px;
        margin-left: 27px;
        margin-right: 0px;
        width: 400px; } }

@media (min-width: 768px) {
  .features {
    padding: 50px 0px 30px 0px; } }

.features__text-content {
  text-align: center;
  margin-top: 30px; }
  @media (min-width: 504px) {
    .features__text-content {
      margin-top: -22px; } }
  @media (min-width: 768px) {
    .features__text-content {
      margin-top: 0px; } }

.features__list {
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column; }
  @media (min-width: 768px) {
    .features__list {
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
              flex-direction: row; } }

.features__type {
  text-align: center;
  width: 300px;
  line-height: 24px;
  margin: 30px auto; }
  @media (min-width: 504px) {
    .features__type {
      margin: 23px auto; } }
  @media (min-width: 768px) {
    .features__type {
      margin: 0px auto; } }
  .features__type img {
    margin-bottom: 0px; }
  .features__type h3 {
    margin: 0; }
  .features__type p {
    margin: 11px 0; }
  .features__type a {
    color: #540cfa;
    font-weight: 600; }

.shows {
  padding: .5rem 0; }
  @media (min-width: 768px) {
    .shows {
      padding-top: 27px;
      padding-bottom: 30px; } }
  @media (min-width: 814px) {
    .shows {
      padding-top: 79px;
      padding-bottom: 47px; } }
  @media (min-width: 1192px) {
    .shows {
      padding-bottom: 115px; } }
  @media (min-width: 1366px) {
    .shows {
      padding-bottom: 151px; } }

@media (min-width: 768px) {
  .platform {
    padding: 30px 0px 112px 0px; } }

@media (min-width: 1048px) {
  .platform {
    padding: 30px 0px 108px 0px; } }

.platform__wrapper {
  display: -webkit-box;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
          flex-direction: column; }
  @media (min-width: 768px) {
    .platform__wrapper {
      -webkit-box-orient: horizontal;
      -webkit-box-direction: normal;
              flex-direction: row; } }

.platform__lists {
  display: -webkit-box;
  display: flex;
  -webkit-box-align: center;
          align-items: center; }
  .platform__lists p {
    margin-left: 13px; }

@media (min-width: 768px) {
  .platform__img {
    display: -webkit-box;
    display: flex; } }

.platform__phone {
  display: block;
  margin-top: 30px;
  margin-left: auto;
  margin-right: auto; }
  @media (min-width: 768px) {
    .platform__phone {
      display: inline;
      position: relative;
      top: 26px;
      width: 300px;
      margin-top: 0px; } }
  @media (min-width: 1024px) {
    .platform__phone {
      widtH: 300px;
      left: 71px; } }
  @media (min-width: 1030px) {
    .platform__phone {
      left: 63px; } }
  @media (min-width: 1034px) {
    .platform__phone {
      left: 119px;
      top: 11px; } }
  @media (min-width: 1040px) {
    .platform__phone {
      left: -11px;
      top: 100px; } }
  @media (min-width: 1045px) {
    .platform__phone {
      left: 114px;
      top: 21px; } }
  @media (min-width: 1188px) {
    .platform__phone {
      left: -14px; } }
  @media (min-width: 1576px) {
    .platform__phone {
      left: 55px; } }

.platform__web-app {
  display: none; }
  @media (min-width: 1030px) {
    .platform__web-app {
      display: none; } }
  @media (min-width: 1034px) {
    .platform__web-app {
      display: none; } }
  @media (min-width: 1188px) {
    .platform__web-app {
      display: inline;
      position: relative;
      top: -56px;
      right: 283px;
      z-index: -1; } }
  @media (min-width: 1576px) {
    .platform__web-app {
      right: 139px; } }

.community {
  background-color: black;
  color: #ffffff;
  overflow: hidden;
  height: 800px; }
  @media (min-width: 768px) {
    .community {
      height: 800px; } }
  .community__wrapper {
    display: -webkit-box;
    display: flex;
    -webkit-box-orient: vertical;
    -webkit-box-direction: normal;
            flex-direction: column;
    margin-top: -139px; }
    @media (min-width: 738px) {
      .community__wrapper {
        margin-top: -75px; } }
    @media (min-width: 768px) {
      .community__wrapper {
        -webkit-box-pack: justify;
                justify-content: space-between;
        margin-top: 0px; } }
  .community__mobile-images {
    margin-top: -165px;
    width: 260px; }
    @media (min-width: 738px) {
      .community__mobile-images {
        margin-top: -134px; } }
    @media (min-width: 768px) {
      .community__mobile-images {
        display: none; } }
  .community__mobile-images-1 {
    background-color: #191717; }
  .community__mobile-images-2 {
    position: relative;
    top: -215px;
    left: 268px;
    height: 210px;
    background-color: #191717; }
  .community__mobile-images-3 {
    position: relative;
    top: -429px;
    left: 536px;
    height: 210px;
    background-color: #191717; }
  .community__images {
    display: none; }
    @media (min-width: 768px) {
      .community__images {
        display: -webkit-box;
        display: flex; } }
  .community__text-content {
    margin: 200px 0; }
  @media (min-width: 768px) {
    .community__images--1 {
      position: relative;
      bottom: 873px;
      left: 481px; } }
  @media (min-width: 1188px) {
    .community__images--1 {
      left: 581px; } }
  @media (min-width: 768px) {
    .community__images--2 {
      display: none; } }
  @media (min-width: 768px) {
    .community__images--2 {
      display: inline;
      position: relative;
      bottom: 799px;
      left: 494px; } }
  @media (min-width: 768px) {
    .community__images--2 {
      display: inline;
      position: relative;
      bottom: 799px;
      left: 494px; } }
  @media (min-width: 1188px) {
    .community__images--2 {
      left: 627px; } }

.started {
  padding: 5rem 0; }
  .started__wrapper {
    text-align: center; }

.footer {
  text-align: center;
  font-size: 14px;
  line-height: 18px; }
  .footer a {
    color: #540cfa; }
  .footer__social-links {
    display: -webkit-box;
    display: flex;
    -webkit-box-pack: center;
            justify-content: center;
    margin-bottom: 30px;
    margin-right: 25px; }
  .footer__social-links li {
    padding-left: 18px; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
